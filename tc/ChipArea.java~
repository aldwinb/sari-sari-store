
public class ChipArea {

  private class ChipCoord {
    
  }

  // fields
  private static int seed = 111;
  private static int randomLimit = 323537;
  private int R;

  public ChipArea() {
    R = 1;  
  }

  // public methods
  public void maxArea(int skip, int n) {
    // int R = getR(skip, seed);
    // for (int i = 0; i < n; i ++) {0 :update
    //
      
    
    // }
  }

  // private methods
  private double[] getBadPoints(int n) {
    double[] badPoints = new double[n*2];
    int R1 = 0, R2 = 0;
    for (int i = 0; i < (n*2); i += 2) {
      R1 = nextR();
      R2 = nextR();
      double x = getPoint(R1);
      double y = getPoint(R2);

      badPoints[i] = x;
      badPoints[i+1] = y;
    }

    return badPoints;
  }

  private void skipR(int skip, int R) {
    for (int i = 0; i < skip; i++) {
      nextR();
    }
  }

  private int nextR() {
    R = (seed * R) % randomLimit;
    return R;
  }

  private double getPoint(int R) {
    return R / (randomLimit * 1.0); 
  }

  // MAIN
  public static void main(String[] args) {
    if (args.length < 2)
    {
      System.out.println(String.format("Invalid number of arguments. USAGE: java ChipArea skip n"));
      System.exit(1);
    }
    
    ChipArea c = new ChipArea();
    int skip = Integer.parseInt(args[0])
      , n = Integer.parseInt(args[1]);
    c.skipR(skip, seed);
    double[] badPoints = c.getBadPoints(n);
    for (int i = 0; i < (n*2); i += 2) {
      System.out.println(String.format("(%s, %s)", badPoints[i], badPoints[i+1]));
    }
  }

}
